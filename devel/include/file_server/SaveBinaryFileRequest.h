// Generated by gencpp from file file_server/SaveBinaryFileRequest.msg
// DO NOT EDIT!


#ifndef FILE_SERVER_MESSAGE_SAVEBINARYFILEREQUEST_H
#define FILE_SERVER_MESSAGE_SAVEBINARYFILEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace file_server
{
template <class ContainerAllocator>
struct SaveBinaryFileRequest_
{
  typedef SaveBinaryFileRequest_<ContainerAllocator> Type;

  SaveBinaryFileRequest_()
    : name()
    , value()  {
    }
  SaveBinaryFileRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , value(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveBinaryFileRequest_

typedef ::file_server::SaveBinaryFileRequest_<std::allocator<void> > SaveBinaryFileRequest;

typedef boost::shared_ptr< ::file_server::SaveBinaryFileRequest > SaveBinaryFileRequestPtr;
typedef boost::shared_ptr< ::file_server::SaveBinaryFileRequest const> SaveBinaryFileRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::file_server::SaveBinaryFileRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::file_server::SaveBinaryFileRequest_<ContainerAllocator1> & lhs, const ::file_server::SaveBinaryFileRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::file_server::SaveBinaryFileRequest_<ContainerAllocator1> & lhs, const ::file_server::SaveBinaryFileRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace file_server

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cee6ad278ed7b88083afe47e9bc6af99";
  }

  static const char* value(const ::file_server::SaveBinaryFileRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcee6ad278ed7b880ULL;
  static const uint64_t static_value2 = 0x83afe47e9bc6af99ULL;
};

template<class ContainerAllocator>
struct DataType< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "file_server/SaveBinaryFileRequest";
  }

  static const char* value(const ::file_server::SaveBinaryFileRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"char[] value\n"
;
  }

  static const char* value(const ::file_server::SaveBinaryFileRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveBinaryFileRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::file_server::SaveBinaryFileRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::file_server::SaveBinaryFileRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.value[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FILE_SERVER_MESSAGE_SAVEBINARYFILEREQUEST_H
